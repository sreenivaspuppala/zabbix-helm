# Default values for zabbix.

db_access:
  # -- components at once, or if left uncommented, set the credentials for each of the components manually
  # -- Address of database host - ignored if postgresql.enabled=true
  DB_SERVER_HOST: "zabbix-postgresql"
  # -- Port of database host - ignored if postgresql.enabled=true
  DB_SERVER_PORT: "5432"
  # -- User of database
  POSTGRES_USER: "zabbix"
  # -- Password of database
  POSTGRES_PASSWORD: "zabbix"
  # -- Name of database
  POSTGRES_DB: "zabbix"

# **PostgreSQL** configurations
postgresql:
  # -- Create a database using Postgresql
  enabled: true
  image:
    # -- Postgresql Docker image name: chose one of "postgres" or "timescale/timescaledb"
    repository: postgres
    # -- Pull policy of Docker image
    pullPolicy: IfNotPresent
    # -- List of dockerconfig secrets names to use when pulling images
    pullSecrets: []
  # -- User of database
  POSTGRES_USER: "zabbix"
  # -- Password of database
  POSTGRES_PASSWORD: "zabbix"
  # -- Name of database
  POSTGRES_DB: "zabbix"
  #- max simultaneous connections to accept for the Postgres server
  max_connections: 50
  persistence:
    # -- whether to enable persistent storage for the postgres container or not
    enabled: false
    # -- existing persistent volume claim name to be used to store posgres data
    existing_claim_name: false
    # -- size of the PVC to be automatically generated
    storage_size: 5Gi
    # -- storage PVC storageclass to use
    #storage_class: my-storage-class
  service:
    # -- Type of service in Kubernetes cluster
    type: ClusterIP
    # -- Cluster IP for Zabbix server
    clusterIP: 
    # -- Port of service in Kubernetes cluster
    port: 5432
    # -- Annotations for the zabbix-server service
    annotations: {}
    # metallb.universe.tf/address-pool: production-public-ips
  # -- Extra environment variables. A list of additional environment variables.
  extraEnv: []


# **Zabbix Server** configurations
zabbixserver:
  # -- Enables use of **Zabbix Server**
  enabled: true
  # -- Number of replicas of ``zabbixserver`` module
  replicaCount: 1
  # -- optional set true open a port direct on node where zabbix server runs
  hostPort: false
  # -- optional set hostIP different from 0.0.0.0 to open port only on this IP
  hostIP: 0.0.0.0
  resources: {}
  image:
    # -- Zabbix server Docker image name
    repository: zabbix/zabbix-server-pgsql
    # -- Pull policy of Docker image
    pullPolicy: IfNotPresent
    # -- List of dockerconfig secrets names to use when pulling images
    pullSecrets: []
  # -- Address of database host
  DB_SERVER_HOST: "zabbix-postgresql"
  # -- Port of database host
  DB_SERVER_PORT: "5432"
  # -- User of database
  POSTGRES_USER: "zabbix"
  # -- Password of database
  POSTGRES_PASSWORD: "zabbix"
  # -- Name of a secret used for Postgres Password, if set, it overrules the POSTGRES_PASSWORD value
  POSTGRES_PASSWORD_SECRET: ""
  # -- Key of the secret used for Postgres Password, requires POSTGRES_PASSWORD_SECRET, defaults to password
  POSTGRES_PASSWORD_SECRET_KEY: "password"
  # -- Name of database
  POSTGRES_DB: "zabbix"
  service:
    # -- Type of service in Kubernetes cluster
    type: ClusterIP
    # -- Cluster IP for Zabbix server
    clusterIP:
    # -- Port of service in Kubernetes cluster
    port: 10051
    # -- NodePort of service on each node
    nodePort: 31051
    # -- Annotations for the zabbix-server service
    annotations: {}
    # metallb.universe.tf/address-pool: production-public-ips
  # -- Extra environment variables. A list of additional environment variables. See example: https://github.com/cetic/helm-zabbix/blob/master/docs/example/kind/values.yaml
  extraEnv: []
    #- name: ENABLE_TIMESCALED
    #  value: "true"


# **Zabbix Agent** configurations
zabbixagent:
  # -- Enables use of **Zabbix Agent**
  enabled: true
  # -- Number of replicas of ``zabbixserver`` module
  replicaCount: 1
  resources: {}
  image:
    # -- Zabbix agent Docker image name. Can use zabbix/zabbix-agent or zabbix/zabbix-agent2
    repository: zabbix/zabbix-agent
    # -- Pull policy of Docker image
    pullPolicy: IfNotPresent
    # -- List of dockerconfig secrets names to use when pulling images
    pullSecrets: []
  # -- Zabbix server host
  ZBX_SERVER_HOST: 127.0.0.1
  # -- Zabbix server port
  ZBX_SERVER_PORT: 10051
  # -- This variable is boolean (true or false) and enables or disables feature of passive checks. By default, value is true
  ZBX_PASSIVE_ALLOW: true
  # -- The variable is comma separated list of allowed Zabbix server or proxy hosts for connections to Zabbix agent container.
  ZBX_PASSIVESERVERS: 127.0.0.1
  # -- This variable is boolean (true or false) and enables or disables feature of active checks
  ZBX_ACTIVE_ALLOW: true
  # -- The variable enable communication with Zabbix Java Gateway to collect Java related checks. By default, value is false.
  ZBX_JAVAGATEWAY_ENABLE: false
  # -- Cache size
  ZBX_VMWARECACHESIZE: 128M
  service:
    # -- Type of service for Zabbix agent
    type: ClusterIP
    # -- Cluster IP for Zabbix agent
    clusterIP:
    # -- Port to expose service
    port: 10050
    # -- Annotations for the zabbix-agent service
    annotations: {}
    # metallb.universe.tf/address-pool: production-public-ips
  # -- Extra environment variables. A list of additional environment variables. See example: https://github.com/cetic/helm-zabbix/blob/master/docs/example/kind/values.yaml
  extraEnv: []

# **Zabbix Web** configurations
zabbixweb:
  # -- Enables use of **Zabbix Web**
  enabled: true
  resources: {}
  image:
    # -- Zabbix web Docker image name
    repository: zabbix/zabbix-web-nginx-pgsql
    # -- Pull policy of Docker image
    pullPolicy: IfNotPresent
    # -- List of dockerconfig secrets names to use when pulling images
    pullSecrets: []
  # -- Zabbix server host
  DB_SERVER_HOST: zabbix-postgresql
  # -- Port of database
  DB_SERVER_PORT: 5432
  # -- User of database
  POSTGRES_USER: zabbix
  # -- Password of database
  POSTGRES_PASSWORD: zabbix
  # -- Name of database
  POSTGRES_DB: zabbix
  service:
    # -- Type of service for Zabbix web
    type: NodePort
    # -- Cluster IP for Zabbix web
    clusterIP:
    # -- Port to expose service
    port: 80
    # -- Annotations for the zabbix-web service
    annotations: {}
    # metallb.universe.tf/address-pool: production-public-ips
  # -- Extra environment variables. A list of additional environment variables. See example: https://github.com/cetic/helm-zabbix/blob/master/docs/example/kind/values.yaml
  extraEnv: []

# Ingress configurations
ingress:
  # -- Enables Ingress
  enabled: false
  # -- Ingress annotations
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  # -- Ingress extra labels
  extraLabels: {}
  # -- Ingress hosts
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  # -- Ingress TLS configuration
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
  # For Kubernetes >= 1.18 you should specify the ingress-controller via the field ingressClassName
  # See https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/#specifying-the-class-of-an-ingress
  # ingressClassName: nginx
  # -- pathType is only for k8s >= 1.1=
  pathType: Prefix

livenessProbe:
  # -- Path of health check of application
  path: /
  # -- Number of seconds after the container has started before liveness
  initialDelaySeconds: 30
  # -- Specifies that the kubelet should perform a liveness probe every N seconds
  periodSeconds: 10
  # -- Number of seconds after which the probe times out
  timeoutSeconds: 5
  # -- When a probe fails, Kubernetes will try failureThreshold times before giving up. Giving up in case of liveness probe means restarting the container. In case of readiness probe the Pod will be marked Unready
  failureThreshold: 6
  # -- Minimum consecutive successes for the probe to be considered successful after having failed
  successThreshold: 1

readinessProbe:
  # -- Path of health check of application
  path: /
  # -- Number of seconds after the container has started before readiness
  initialDelaySeconds: 5
  # -- Specifies that the kubelet should perform a readiness probe every N seconds
  periodSeconds: 10
  # -- Number of seconds after which the probe times out
  timeoutSeconds: 5
  # -- When a probe fails, Kubernetes will try failureThreshold times before giving up. Giving up in case of liveness probe means restarting the container. In case of readiness probe the Pod will be marked Unready
  failureThreshold: 6
  # -- Minimum consecutive successes for the probe to be considered successful after having failed
  successThreshold: 1

# -- nodeSelector configurations
nodeSelector: {}

# -- Tolerations configurations
tolerations: []

# -- Affinity configurations
affinity: {}
